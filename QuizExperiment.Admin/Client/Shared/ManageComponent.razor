@using QuizExperiment.Models
@using System.Text.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IApplicationInsights AppInsights

@if (_isLoaded)
{
    <QuizExperiment.Admin.Client.Shared.Components.TitleBar Name="Quiz Manager" />
    <div class="page">
        <main>
            <article class="content px-4">
                <div class="container">
                    <div class="row my-3 border border-4 rounded-3 p-3 align-items-center">
                        <div class="col-auto">
                            <span>Create a new Quiz</span>
                        </div>
                        <div class="col">
                            <input @bind="_title" class="form-control" placeholder="Enter a Title" maxlength="50" />
                        </div>
                        <div class="col-auto">
                            <button @onclick="AddNewQuestionSet" class="btn btn-primary">Add new</button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="mx-auto border border-4 rounded-3">
                            <table class="table table-stripped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Title</th>
                                        <th>Last Modified</th>
                                        <th>Edit</th>
                                        <th>Present</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var a in _questionSets)
                                    {
                                        <tr>
                                            <td>@a.Title</td>
                                            <td>@a.LastModified</td>
                                            <td><button type="button" class="btn btn-light btn-sm mb-1" value="Edit" @onclick="()=>EditQuestionSet(a.Id)">✏️</button></td>
                                            <td><button type="button" class="btn btn-light btn-sm mb-1" value="Present" @onclick="()=>PresentQuestionSet(a.Id)">▶️</button></td>
                                            <td><button type="button" class="btn btn-light btn-sm mb-1" value="Delete" @onclick="()=>DeleteQuestionSet(a.Id)">🗑️</button></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </article>
        </main>
    </div>
   

}

@code {
    [Parameter]
    public EventCallback<QuestionSet> OnQuestionSetSubmit { get; set; }

    private List<QuestionSetSummary> _questionSets = new List<QuestionSetSummary>();

    private string _title;

    private bool _isLoaded = false; 

    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToArray();
        _userId = claims.First(r => r.Type == "oid").Value;

        var response = await Http.GetAsync($"questionset/list?userId={_userId}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }

        _questionSets = await response.Content.ReadFromJsonAsync<List<QuestionSetSummary>>();
        _isLoaded = true;
        return;
    }

    private async Task AddNewQuestionSet()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var qs = new QuestionSet()
        {
                Id = Guid.NewGuid().ToString(),
                UserId = _userId,
                Description = _title,
                Title = _title,
                Questions = new List<Question>()
                {
                    new Question
                    {
                        Title ="",
                        ImageUrl = "",
                        Timeout = 30,
                        Options = new[] {"","","",""},
                        CorrectAnswerIndex = -1,                        
                    }
                }
        };

        var serializedQuestionSet = JsonSerializer.Serialize(qs);
        var content = new StringContent(serializedQuestionSet,
            System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"questionset/upsert",
                        content);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }

        NavigationManager.NavigateTo($"/edit/{qs.Id}");
    }

    private async Task DeleteQuestionSet(string id)
    {
        var response = await Http.DeleteAsync($"questionset/delete?userId={_userId}&id={id}");
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }
        var indexOfQuestionSetToBeRemoved = _questionSets.IndexOf(_questionSets.First(r=>r.Id == id));
        _questionSets.RemoveAt(indexOfQuestionSetToBeRemoved);

        await AppInsights.TrackEvent("QuestionSetRemoved", new Dictionary<string, object?>
        {
            { "userId", _userId },
            { "Id", id },
        });
    }

    private async Task PresentQuestionSet(string id)
    {
        NavigationManager.NavigateTo($"/present/{id}");
    }

    private void EditQuestionSet(string id)
    {
        NavigationManager.NavigateTo($"/edit/{id}");
    }


}
