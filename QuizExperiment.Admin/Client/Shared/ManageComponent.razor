@using Blazorise
@using Microsoft.AspNetCore.WebUtilities
@using QuizExperiment.Models
@using System.Text.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IApplicationInsights AppInsights

@if (_isLoaded)
{
    <QuizExperiment.Admin.Client.Shared.Components.TitleBar Name="Quiz Manager" />

    <div class="d-flex flex-column justify-content-center align-items-center">
        <div class="d-flex min-vw-100 quiz-manage-controls-container">
            <div class="quiz-manage-search-container flex-grow-1">
                <div class="quiz-manage-breadcrumb-container">
                    @if (!string.IsNullOrWhiteSpace(_folderFilter))
                    {
                        var filterSegements = _folderFilter.Split("/");
                        

                        <button class="btn btn-success my-3 btn-breadcrumb" @onclick="()=>BrowseFolder(HomeFilter)">
                            🏠
                        </button>
                        @foreach (var segment in filterSegements)
                        {
                            var aggregatePath = "";
                            foreach(var innerSeg in filterSegements)
                            {

                                if (aggregatePath == "")
                                {
                                    aggregatePath = innerSeg;
                                }
                                else
                                {
                                    aggregatePath = aggregatePath + "/" + innerSeg;
                                }

                                if (innerSeg == segment)
                                {
                                    break;
                                }
                            }

                            <span>/</span>
                            <button class="btn btn-success my-3 btn-breadcrumb" @onclick="()=>BrowseFolder(aggregatePath)">
                                @segment
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="quiz-manage-create-new-container">
                <button class="btn btn-success my-3 btn-primary-action" @onclick="AddNewQuestionSet">
                    CREATE NEW QUIZ >
                </button>
            </div>
        </div>

        <div class="d-flex flex-grow-1 quiz-manage-items-container flex-wrap align-items-start">
            @foreach (var a in _folders)
            {
                var fullFolderPath="";
                if(string.IsNullOrWhiteSpace(_folderFilter))
                {
                    fullFolderPath = a;
                }
                else
                {
                    fullFolderPath = _folderFilter + "/" + a;
                }
                <div class="d-flex flex-column quiz-manage-item-container" @onclick="()=>BrowseFolder(fullFolderPath)">
                    <div class="flex-grow-1 quiz-manage-item-details">
                        <div class="quiz-manage-item-folder">
                            <div class="quiz-manage-item-folder-icon">📁</div>
                            <div class="quiz-manage-item-folder-title fs-3 fw-bold">@a</div>
                        </div>
                    </div>
                </div>
            }

            @foreach (var a in _questionSets)
            {
                <div class="d-flex flex-column quiz-manage-item-container ">
                    <div class="d-flex quiz-manage-item-controls">
                        <div class="flex-grow-1">
                            <button class="quiz-manage-item-present" title="Present this quiz" @onclick="()=>PresentQuestionSet(a.Id)">
                                <div class="quiz-manage-item-present-triangle"></div>
                            </button>
                        </div>
                        <button class="quiz-manage-item-edit" title="edit" @onclick="()=>EditQuestionSet(a.Id)">
                            ✏️
                        </button>
                        <button class="quiz-manage-item-delete" title="delete" @onclick="()=>DeleteQuestionSet(a.Id)">
                            🗑️
                        </button>
                    </div>

                    <div class="flex-grow-1 quiz-manage-item-details">
                        <div class="quiz-manage-item-title fs-3 fw-bold">@a.Title</div>
                        <div class="quiz-manage-item-title">@a.FolderPath</div>
                        @if (a.QuestionCount.HasValue)
                        {
                            <div class="quiz-manage-item-questions fs-5">@a.QuestionCount Questions</div>
                        }
                        <div class="quiz-manage-item-last-modified fs-5">Last modified: @a.LastModified?.ToString("yyyy/MM/dd")</div>
                    </div>

                </div>
            }

        </div>
    </div>
    <Blazorise.Modal @ref="confirmDelete">
        <Blazorise.ModalContent Centered>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>Confirm Delete?</Blazorise.ModalTitle>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                Are you sure you want to delete this quiz?
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Color.Secondary" Clicked="@DoCloseModal">Cancel</Blazorise.Button>
                <Blazorise.Button Color="Color.Primary"  Clicked="@DoDeleteQuestionSet">OK</Blazorise.Button>
            </Blazorise.ModalFooter>
        </Blazorise.ModalContent>
    </Blazorise.Modal>
}

@code {
    [Parameter]
    public EventCallback<QuestionSet> OnQuestionSetSubmit { get; set; }

    private List<QuestionSetSummary> _questionSets = new List<QuestionSetSummary>();

    private List<string?> _folders = new List<string?>();

    private bool _isLoaded = false; 

    private string? _userId;

    [SupplyParameterFromQuery(Name = "path")]
    private string _folderFilter { get; set; } = "";

    private const string HomeFilter = "";

    private async Task FetchData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToArray();
        _userId = claims.First(r => r.Type == "oid").Value;

        var response = await Http.GetAsync($"questionset/list?userId={_userId}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }

        var questionSetSummary = await response.Content.ReadFromJsonAsync<List<QuestionSetSummary>>() ?? new List<QuestionSetSummary>();



        if (string.IsNullOrWhiteSpace(_folderFilter))
        {
            _questionSets = questionSetSummary
                                .Where(r=>string.IsNullOrWhiteSpace(r.FolderPath))
                                .OrderByDescending(r=>r.LastModified).ToList();
        }
        else
        {
            _questionSets = questionSetSummary
                                .Where(r => r.FolderPath == _folderFilter)
                                .OrderByDescending(r => r.LastModified).ToList();
        }

        _folders = questionSetSummary.Where(k => k.FolderPath.StartsWith(_folderFilter ?? "") 
                                            && k.FolderPath != (_folderFilter ?? ""))
                                .Select(k => string.IsNullOrWhiteSpace(_folderFilter)
                                            ? k.FolderPath.Split("/")[0] 
                                            : k.FolderPath.Substring(_folderFilter.Length + 1).Split("/")[0])
                                .Distinct()
                                .ToList();



        _isLoaded = true;
        return;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task AddNewQuestionSet()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var qs = new QuestionSet()
        {
                Id = Guid.NewGuid().ToString(),
                UserId = _userId,
                Description = "",
                Title = "",
                Questions = new List<Question>()
                {
                }
        };

        var serializedQuestionSet = JsonSerializer.Serialize(qs);
        var content = new StringContent(serializedQuestionSet,
            System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"questionset/upsert",
                        content);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }

        NavigationManager.NavigateTo($"/edit/{qs.Id}");
    }

    private string quizToDelete = "";
    private Blazorise.Modal? confirmDelete;

    private async Task DeleteQuestionSet(string? id)
    {
        if(string.IsNullOrWhiteSpace(id))
        {
            throw new NullReferenceException("ManageComponent: DeleteQuestionSet: Id is null or empty");
        }
        quizToDelete = id;
        if (confirmDelete != null)
        {
            await confirmDelete.Show();
        }
    }

    private async Task DoCloseModal()
    {
        quizToDelete = "";
        if (confirmDelete != null)
        {
            await confirmDelete.Hide();
        }
    }

    private async Task DoDeleteQuestionSet()
    {
        if (confirmDelete != null)
        {
            await confirmDelete.Hide();
        }

        var id = quizToDelete;
        var response = await Http.DeleteAsync($"questionset/delete?userId={_userId}&id={id}");
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }
        var indexOfQuestionSetToBeRemoved = _questionSets.IndexOf(_questionSets.First(r => r.Id == id));
        _questionSets.RemoveAt(indexOfQuestionSetToBeRemoved);

        await AppInsights.TrackEvent(new EventTelemetry()
            {
                Name = "QuestionSetRemoved",
                Properties = new Dictionary<string, object?>
                {
                    { "userId", _userId },
                    { "Id", id },
                }
            });
        quizToDelete = "";
    }

    private void PresentQuestionSet(string? id)
    {
        if(string.IsNullOrWhiteSpace(id))
        {
            throw new NullReferenceException("ManageComponent: PresentQuestionSet: Id is null or empty");
        }


        NavigationManager.NavigateTo($"/present/{id}");
    }

    private void EditQuestionSet(string? id)
    {
        if(string.IsNullOrWhiteSpace(id))
        {
            throw new NullReferenceException("ManageComponent: EditQuestionSet: Id is null or empty");
        }
        NavigationManager.NavigateTo($"/edit/{id}");
    }

    private async Task BrowseFolder(string? folderName)
    {

        if (string.IsNullOrWhiteSpace(folderName))
        {
            _folderFilter = "";
        }
        else
        {
            _folderFilter = folderName;
        }

        if (string.IsNullOrWhiteSpace(_folderFilter))
        {
            NavigationManager.NavigateTo($"/manage");
        }
        else
        {
            NavigationManager.NavigateTo($"/manage?path={_folderFilter}");
        }
        await FetchData();
    }


}
