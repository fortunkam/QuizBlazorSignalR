@using Microsoft.AspNetCore.SignalR.Client
@using QuizExperiment.Admin.Client.Enums
@using QuizExperiment.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@implements IAsyncDisposable
@inject IApplicationInsights AppInsights

@if (_isLoaded)
{
    @if (_userState == ClientUserState.Idle)
    {
        <JoinQuiz OnQuizIdSubmit="@EnterQuizId" />
    }

    @if (_userState == ClientUserState.WaitingForUserName)
    {
        <UserName OnUserNameSubmit="@RegisterUser" />
    }

    @if (_userState == ClientUserState.WaitingForStart)
    {
        <WaitingForQuestions UserName="@userName" />
    }



    @if (_userState == ClientUserState.WaitingForAnswer)
    {
        <SingleAnswerMultiSelectQuestion PossibleAnswers="@currentPossibleAnswers"
        OnAnswerSubmit="@AnswerQuestion" Question="@currentQuestion" />
    }

    @if (_userState == ClientUserState.WaitForAnswerCheck)
    {
        <WaitingForAnswerCheck />
    }

    @if (_userState == ClientUserState.IdleInGame)
    {
        <AnswerSummary MyAnswerIndex="@currentAnswerIndex" CorrectAnswerIndex="@correctAnswerIndex" 
        CurrentScore=@_currentScore CorrectAnswer="@(currentPossibleAnswers?[correctAnswerIndex])"
        Position=@_position IsLastQuestion="@_isLastQuestion"/>
    }

    @if (_userState == ClientUserState.FinalPosition)
    {
        <PlayerPosition Position="@_position" Score="@_currentScore" />
    }
}


@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? clientQuizId { get; set; }

    private string? userName;

    private string currentQuestion = "";
    private int currentAnswerIndex = -1;
    private string[]? currentPossibleAnswers = null;

    private int correctAnswerIndex = -1;
    private bool wasLastAnswerCorrect = false;
    private bool _isLastQuestion = false;

    private int _currentScore;
    private int _position;

    private bool _isLoaded = false;

    private DateTime? _questionStartTime;

    private HubConnection? hubConnection;

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/quizhub"))
            .Build();

        hubConnection.On<string, string[]>("QuestionArrived", async (question, possibleAnswers) =>
        {
            currentQuestion = question;
            currentPossibleAnswers = possibleAnswers;
            currentAnswerIndex = -1;
            correctAnswerIndex = -1;
            wasLastAnswerCorrect = false;
            _questionStartTime = DateTime.UtcNow;
            _userState = ClientUserState.WaitingForAnswer;
            await AppInsights.TrackEvent("ClientQuestionArrived", 
                new Dictionary<string, object?>
                {
                    { "userName", userName },
                    { "Question", currentQuestion },
                }
            );

            StateHasChanged();
        });

        hubConnection.On<int, int,int, bool>("AnswerArrived", async (answer, currentScore, position, isLastQuestion) =>
           {
               correctAnswerIndex = answer;
               wasLastAnswerCorrect = (answer == currentAnswerIndex);
               _position = position;
               _currentScore = currentScore;
               _isLastQuestion = isLastQuestion;
               _userState = ClientUserState.IdleInGame; 
               await AppInsights.TrackEvent("ClientAnswerArrived", 
                  new Dictionary<string, object?>
                {
                    { "userName", userName },
                    { "Question", currentQuestion },
                    { "wasLastAnswerCorrect", wasLastAnswerCorrect },
                }
              );
               StateHasChanged();
           });

        hubConnection.On<int, int>("PlayerPositionArrived", (position, score) =>
        {
            _position = position;
            _currentScore = score;
            _userState = ClientUserState.FinalPosition;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (clientQuizId != null)
        {
            _userState = ClientUserState.WaitingForUserName;
        }

        _isLoaded = true;
    }


    private ClientUserState _userState = ClientUserState.Idle;

    private void EnterQuizId(string quizId)
    {
        clientQuizId = quizId;
        _userState = ClientUserState.WaitingForUserName;
    }

    private async Task RegisterUser(string user)
    {
        if (IsConnected)
        {
            userName = user;
            await AppInsights.TrackEvent("ClientJoinQuizSession",
                    new Dictionary<string, object?>
                        {
                    { "userName", userName },
                    { "clientQuizId", clientQuizId }
                        }
                );
            if(hubConnection is null)
            {
                throw new NullReferenceException("hubConnection is null");
            }
            await hubConnection.SendAsync("JoinQuizSession", clientQuizId, userName);
            _userState = ClientUserState.WaitingForStart;
        }

    }

    private async Task AnswerQuestion(int answerIndex)
    {
        if (IsConnected)
        {
            currentAnswerIndex = answerIndex;
            var timeTaken = (DateTime.UtcNow - (_questionStartTime ?? DateTime.MinValue)).TotalMilliseconds;

            await AppInsights.TrackEvent("ClientSubmitAnswer",
                    new Dictionary<string, object?>
                        {
                    { "userName", userName },
                    { "clientQuizId", clientQuizId },
                    { "question", currentQuestion },
                    { "currentAnswerIndex", currentAnswerIndex },
                    { "timeTaken", timeTaken }
                        }
                );
            if(hubConnection is null)
            {
                throw new NullReferenceException("hubConnection is null");
            }
            await hubConnection.SendAsync("SubmitAnswer", clientQuizId, currentAnswerIndex, timeTaken);
            _userState = ClientUserState.WaitForAnswerCheck;
        }

    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }




}